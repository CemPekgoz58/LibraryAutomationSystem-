/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package computerproject2;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Cem
 */
public class BorrowBookFrame extends javax.swing.JFrame {

    ArrayList<Book> bookList;
    Member currentMember;
    DefaultTableModel dtm = new DefaultTableModel();
    String selectedCategory = "All";
    DBConnection db = new DBConnection();

    /**
     * Member currentMember; * Creates new form BorrowBookFrame
     *
     * @param currentMember
     */
    public BorrowBookFrame(Member currentMember) {
        this.currentMember = currentMember;

        bookList = db.readBooksFromDatabase();
        this.currentMember = currentMember;
        initComponents();

        jTable1.setModel(dtm);
        String[] headers = {"Book Name", "Author", "Page Count", "Category", "Availability", "Borrowed By"};
        dtm.setColumnIdentifiers(headers);
        String[] categories = {"All", "Science", "Literature", "Philosophy", "Technology", "History"};

        for (String category : categories) {
            jComboBox1.addItem(category);
        }
        updateTable(selectedCategory);
    }

    public void updateTable(String selectedCategory) {
        dtm.setRowCount(0);

        for (Book book : bookList) {
            if ("All".equals(selectedCategory) || book.getCategory().equalsIgnoreCase(selectedCategory)) {
                String availabilityText = book.isAvailable() ? "Available" : "Borrowed";

                dtm.addRow(new Object[]{
                    book.getTitle(),
                    book.getAuthor(),
                    book.getPageCount(),
                    book.getCategory(),
                    availabilityText,
                    book.getBorrowedBy() != null ? book.getBorrowedBy() : ""
                });
            }
        }
    }

    public ArrayList<Book> filterBooksByCategory(String category) {
        ArrayList<Book> filteredBooks = new ArrayList<>();
        for (Book book : bookList) {
            if (book.getCategory().equals(category)) {
                filteredBooks.add(book);
            }
        }
        return filteredBooks;
    }

    public void loadBooksToTable(String txtFilePath) {

        dtm.setRowCount(0);  
        for (Book b : bookList) {
            Object[] row = new Object[]{
                b.getTitle(),
                b.getAuthor(),
                b.getPageCount(),
                b.getCategory(),
                b.isAvailable() ? "Available" : "Borrowed"
            };
            dtm.addRow(row);
        }
    }

    /**
     * This method is cal }led from within the constructor to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Borrow Book");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jButton2.setText("Back to Main Menu");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Return Book");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Select Category");

        jButton4.setText("Filter");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(63, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)))
                .addGap(38, 38, 38))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4))
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(60, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        int selectedRow = jTable1.getSelectedRow(); // Get selected row

        if (selectedRow != -1) {  // Check if a row is selected
            // Get the selected book title from the table
            String bookTitle = (String) dtm.getValueAt(selectedRow, 0);

            // Find the book object in the bookList based on the title
            Book selectedBook = null;
            for (Book book : bookList) {
                if (book.getTitle().equals(bookTitle)) {
                    selectedBook = book;
                    break;
                }
            }

            if (selectedBook != null) {
                if (selectedBook.isAvailable()) {
                    try {
                        selectedBook.setAvailable(false);
                        selectedBook.setBorrowedBy(currentMember.getEmail());
                        db.updateBookInDatabase(selectedBook);
                        db.writeBooksToFile();
                        updateTable(selectedCategory);
                        
                        // Add the book to the current member if not already added
                        if (!currentMember.getBorrowedBooks().contains(selectedBook)) {
                            currentMember.addBook(selectedBook);  // Add the book to member's list
                        }
                        Transaction transaction = new Transaction(currentMember, selectedBook, "borrow");
                        db.addTransaction(transaction);
                        
                        JOptionPane.showMessageDialog(this, "Book Borrowed Successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    } catch (SQLException ex) {
                        Logger.getLogger(BorrowBookFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "This book is already borrowed!", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            // Handle the case where no book is selected
            JOptionPane.showMessageDialog(this, "No Book Selected", "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        OptionFrame of = new OptionFrame(currentMember, bookList);
        of.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            int selectedRow = jTable1.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select a book to return.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            String bookTitle = (String) jTable1.getValueAt(selectedRow, 0);
            
            // find book from booklist
            Book selectedBook = null;
            for (Book b : bookList) {
                if (b.getTitle().equals(bookTitle)
                        && !b.isAvailable()
                        && b.getBorrowedBy() != null
                        && b.getBorrowedBy().equals(currentMember.getEmail())) {
                    selectedBook = b;
                    break;
                }
            }
            
            if (selectedBook == null) {
                JOptionPane.showMessageDialog(this, "You have not borrowed this book or it's already returned.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            selectedBook.setAvailable(true);
            selectedBook.setBorrowedBy(null);
            
            currentMember.removeBook(selectedBook);
            db.updateBookInDatabase(selectedBook);
            
            db.writeBooksToFile();
            
            updateTable(selectedCategory);
            Transaction transaction = new Transaction(currentMember, selectedBook, "return");
            db.addTransaction(transaction);
            
            
            JOptionPane.showMessageDialog(this, "Book returned successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException ex) {
            Logger.getLogger(BorrowBookFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        selectedCategory = jComboBox1.getSelectedItem().toString();
        updateTable(selectedCategory);

    }//GEN-LAST:event_jButton4ActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BorrowBookFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            Member currentMember1 = new Member(" ", " ");
            new BorrowBookFrame(currentMember1).setVisible(true);
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
